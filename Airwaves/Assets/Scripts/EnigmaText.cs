using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro;
using UnityEngine.UI;

public class EnigmaText : MonoBehaviour {

	#region Serialize Inputs
	[SerializeField] TextMeshPro tex;
	[SerializeField] public int correctSettingLeft;
	[SerializeField] public int correctSettingRight;
	[SerializeField] int currentSettingLeft = 5;
	[SerializeField] int currentSettingRight = 5;
	[SerializeField] public int minSetting, maxSetting;
	[SerializeField] float timeDelay = 0.25f;
	[SerializeField] float closenessLeft = 0.0f;
	[SerializeField] float closenessRight = 0.0f;
	#endregion

	#region Private Variables
	float closeness = 0.0f;
	float timer = 0.0f;
	string trueText;

	char[] alphabet = new char[26];
	#endregion

	#region Component Methods
	// Use this for initialization
	void Start() {
		int ascii = 97;
		for (int i = 0; i < 26; i++) {
			alphabet[i] = (char)ascii;
			ascii++;
		}

		if (correctSettingLeft == 0) {
			correctSettingLeft = Mathf.RoundToInt(Random.value * 10);
		}
		if (correctSettingRight == 0) {
			correctSettingRight = Mathf.RoundToInt(Random.value * 10);
		}


		trueText = tex.text.ToUpper();
		ScrambleText();
	}

	public void UpdateText() {
		trueText = tex.text.ToUpper();
	}

	// Update is called once per frame
	void FixedUpdate() {
		timer += Time.deltaTime;
		//float valueLeft = checkForLeftTriggerInput();
		//float valueRight = CheckForRightTriggerInput();
		float valueLeft = InputCallback.info[0];
		float valueRight = InputCallback.info[1];
		Debug.Log("value" + valueLeft);
		Debug.Log("value Right" + valueRight);
		int deltaLeft = Mathf.RoundToInt((valueLeft * maxSetting));
		int deltaRight = Mathf.RoundToInt((valueRight * maxSetting));
		currentSettingLeft = Mathf.Clamp(deltaLeft, minSetting, maxSetting);
		//Debug.Log("Left Enigma Dialer: " + currentSettingLeft);
		//Debug.Log("Right Enigma Dialer: " + currentSettingRight);
		if (currentSettingLeft != maxSetting && currentSettingLeft != minSetting) {
			checkSetting();

		}
		currentSettingRight = Mathf.Clamp(deltaRight, minSetting, maxSetting);
		if (currentSettingRight != maxSetting && currentSettingRight != minSetting) {
			checkSetting();
		}
		timer = 0;
	}
	#endregion

	#region Private Method


	/// <summary>
	/// Scamples the text and checks for correct cod efor engima machine
	/// </summary>
	private void ScrambleText() {
		char[] letters = trueText.ToLower().ToCharArray();
		string scrambledText = "";
		closenessLeft = 1.0f - ((float)Mathf.Abs((float)correctSettingLeft - (float)currentSettingLeft) / (float)maxSetting);
		closenessRight = 1.0f - ((float)Mathf.Abs((float)correctSettingRight - (float)currentSettingRight) / (float)maxSetting);

		closeness = (closenessLeft + closenessRight) / 2;
		//Debug.Log("Closeness Value: " + closeness);
		foreach (char character in letters) {

			if (checkChar(character)) {
				if (Random.value < closeness) {
					scrambledText += character;
				} else {
					int rand = Random.Range(0, 25);
					scrambledText += alphabet[rand];
				}

			} else {
				scrambledText += character;
			}
			scrambledText = scrambledText.ToUpper();
		}

		tex.text = scrambledText;
		tex.GetComponent<RectTransform>().ForceUpdateRectTransforms();
	}

	/// <summary>
	/// Checks weather the Character generated is an alphabet or not
	/// </summary>
	/// <param name="character">the character generated by enigma machine</param>
	/// <returns></returns>
	private bool checkChar(char character) {
		foreach (char a in alphabet) {
			if (character == a) {
				return true;
			}
		}
		return false;
	}

	/// <summary>
	/// Checks weather the setting is correct for enigma machine
	/// </summary>
	private void checkSetting() {
		if (currentSettingLeft == correctSettingLeft && correctSettingRight == currentSettingRight) {
			tex.text = trueText;
		} else {
			ScrambleText();
		}
	}
	#endregion

	#region Input Function

	/// <summary>
	/// Checks the input of Left Trigger
	/// </summary>
	/// <returns>returns an integer between 1 to 10 depending upon value of Trigger</returns>
	private int checkForLeftTriggerInput() {
		float value = Input.GetAxis("LT");
		int settingValue = Mathf.RoundToInt((value * maxSetting));
		return settingValue;
	}

	/// <summary>
	/// Checks the input of Right Trigger
	/// </summary>
	/// <returns>returns an integer between 1 to 10 depending upon value of Trigger</returns>
	private int CheckForRightTriggerInput() {
		float value = Input.GetAxis("RT");
		int settingValue = Mathf.RoundToInt((value * maxSetting));
		return settingValue;
	}
	#endregion
}
